"use strict";(self.webpackChunkprojet_de_production_2=self.webpackChunkprojet_de_production_2||[]).push([[642],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var u=n.createContext({}),l=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,v=m["".concat(u,".").concat(d)]||m[d]||p[d]||i;return r?n.createElement(v,a(a({ref:t},c),{},{components:r})):n.createElement(v,a({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7386:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var n=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],s={},u="Commandes utiles pour Git !",l={unversionedId:"technical/git",id:"technical/git",isDocsHomePage:!1,title:"Commandes utiles pour Git !",description:"Git est un outil tr\xe8s utile qui vous permet de faire de la gestion de source code. Le but de cette page est donc de montrer des commandes qui vous permettront de vous d\xe9brouiller avec des cas plus complexes pour git.",source:"@site/docs/technical/git.md",sourceDirName:"technical",slug:"/technical/git",permalink:"/projet-de-production-2-website/docs/technical/git",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/technical/git.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Remise 1",permalink:"/projet-de-production-2-website/docs/evaluation/remise_1"},next:{title:"C'est quoi un test?",permalink:"/projet-de-production-2-website/docs/technical/tests"}},c=[{value:"git add <code>&lt;nom de votre fichier&gt;</code>",id:"git-add-nom-de-votre-fichier",children:[],level:2},{value:"git commit -m <code>&lt;message de commit&gt;</code>",id:"git-commit--m-message-de-commit",children:[],level:2},{value:"git push",id:"git-push",children:[],level:2},{value:"git push --set-upstream origin master",id:"git-push---set-upstream-origin-master",children:[],level:2},{value:"git checkout <code>&lt;nom de votre branche&gt;</code>",id:"git-checkout-nom-de-votre-branche",children:[],level:2},{value:"git checkout -b <code>&lt;nom de votre nouvelle branche&gt;</code>",id:"git-checkout--b-nom-de-votre-nouvelle-branche",children:[],level:2},{value:"git pull origin <code>&lt;nom de la branche principale&gt;</code>",id:"git-pull-origin-nom-de-la-branche-principale",children:[],level:2}],p={toc:c};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"commandes-utiles-pour-git-"},"Commandes utiles pour Git !"),(0,i.kt)("p",null,"Git est un outil tr\xe8s utile qui vous permet de faire de la gestion de source code. Le but de cette page est donc de montrer des commandes qui vous permettront de vous d\xe9brouiller avec des cas plus complexes pour git."),(0,i.kt)("p",null,"Avant de commencer, je veux juste s\xe9parer certains concepts pour qu'on comprenne quelle commande va faire quoi."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Local")),(0,i.kt)("p",null,"Lorsque vous allez d\xe9velopper sur votre machine, vous allez d\xe9velopper du code qui sera stock\xe9 ",(0,i.kt)("em",{parentName:"p"},"localement sur votre machine"),". Lorsque vous faites un ",(0,i.kt)("strong",{parentName:"p"},"git add"),", les changements seront sauvegard\xe9s localement sur votre machine. Tant que vous n'aurez pas fait un git push, tous les commits cr\xe9\xe9s et les changements sauvegard\xe9s seront pr\xe9sents uniquement sur votre machine."),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Serveur")),(0,i.kt)("p",null,"Les changements sur le serveur seront effectu\xe9s seulement lorsqu'un ",(0,i.kt)("strong",{parentName:"p"},"git push")," sera effectu\xe9 \xe0 partir de l'ordinateur d'un des collaborateurs du repository."),(0,i.kt)("h2",{id:"git-add-nom-de-votre-fichier"},"git add ",(0,i.kt)("inlineCode",{parentName:"h2"},"<nom de votre fichier>")),(0,i.kt)("p",null,"Cette commande va sauvegarder les changements faits localement dans le but de faire un ",(0,i.kt)("em",{parentName:"p"},"commit"),". Les changements ne sont pas ",(0,i.kt)("em",{parentName:"p"},"coul\xe9s dans le b\xe9ton")," et peuvent \xeatre mis \xe0 jour en refaisant un ",(0,i.kt)("strong",{parentName:"p"},"git add"),"."),(0,i.kt)("h2",{id:"git-commit--m-message-de-commit"},"git commit -m ",(0,i.kt)("inlineCode",{parentName:"h2"},"<message de commit>")),(0,i.kt)("p",null,"Lorsque vous cr\xe9ez un commit, vous cr\xe9ez une commande de votre code source qui sera packag\xe9 sous forme d'un commit. Celui-ci ne pourra pas \xeatre modifi\xe9 par la suite, il pourra seulement \xeatre appliqu\xe9 au serveur, ammend ou effac\xe9. De ce fait, vous devez \xeatre certains de vos changements avant de faire un commit."),(0,i.kt)("h2",{id:"git-push"},"git push"),(0,i.kt)("p",null,"Va envoyer les ",(0,i.kt)("strong",{parentName:"p"},"commits")," qui ont \xe9t\xe9 faits localement vers le serveur. Les changements qui ont \xe9t\xe9 faits sur votre machine et sur le repository distants seront au m\xeame niveau."),(0,i.kt)("h2",{id:"git-push---set-upstream-origin-master"},"git push --set-upstream origin master"),(0,i.kt)("p",null,"Lorsque vous n'avez jamais fait de ",(0,i.kt)("strong",{parentName:"p"},"push")," sur une certaine branche, cette commande va vous permettre de faire un premier push."),(0,i.kt)("h2",{id:"git-checkout-nom-de-votre-branche"},"git checkout ",(0,i.kt)("inlineCode",{parentName:"h2"},"<nom de votre branche>")),(0,i.kt)("p",null,"Lorsque vous voulez aller vers une branche existante, cette commande est ce qu'il vous faut."),(0,i.kt)("h2",{id:"git-checkout--b-nom-de-votre-nouvelle-branche"},"git checkout -b ",(0,i.kt)("inlineCode",{parentName:"h2"},"<nom de votre nouvelle branche>")),(0,i.kt)("p",null,"Lorsque vous voulez aller sur une nouvelle branche que vous voulez cr\xe9er. La branche sera disponible uniquement sur votre poste ",(0,i.kt)("strong",{parentName:"p"},"local")," tant que vous n'effectuez pas de ",(0,i.kt)("strong",{parentName:"p"},"push")," sur le serveur."),(0,i.kt)("h2",{id:"git-pull-origin-nom-de-la-branche-principale"},"git pull origin ",(0,i.kt)("inlineCode",{parentName:"h2"},"<nom de la branche principale>")),(0,i.kt)("p",null,"Lorsque vous voulez aller chercher les commits d'une certaine branche et de les appliquer dans votre branche locale, vous pouvez utiliser cette commande. Il se peut que vous soyez oblig\xe9s d'aller chercher les changements en faisant un checkout sur le master localement et d'effectuer un pull. Suite \xe0 cela, revenez \xe0 votre branche et r\xe9essayez de faire la commande pour voir si les changements sont appliqu\xe9s sur votre branche."),(0,i.kt)("h1",{id:"lectures-int\xe9ressantes"},"Lectures int\xe9ressantes"),(0,i.kt)("p",null,"Il existe plusieurs types de flow pour utiliser git. Celui que je pr\xe9f\xe8re personnellement utiliser est le ",(0,i.kt)("em",{parentName:"p"},"Trunk Based Development"),", qui nous pousse \xe0 avoir une branche principale stable et que les branches ne s'\xe9loignent jamais trop de celui-ci."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.optimizely.com/optimization-glossary/trunk-based-development/"},"https://www.optimizely.com/optimization-glossary/trunk-based-development/")),(0,i.kt)("p",null,"Pour voir les diff\xe9rences entre les merge et les rebase, c'est ici:"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.atlassian.com/fr/git/tutorials/merging-vs-rebasing#:~:text=Le%20merge%20est%20une%20solution,la%20branche%20principale%20(%20main%20)"},"https://www.atlassian.com/fr/git/tutorials/merging-vs-rebasing#:~:text=Le%20merge%20est%20une%20solution,la%20branche%20principale%20(%20main%20)"),"."))}m.isMDXComponent=!0}}]);